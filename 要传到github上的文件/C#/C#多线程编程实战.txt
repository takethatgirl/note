多线程的优缺点？

线程同步：共享临界资源，一个线程需要使用另外一个线程的结果。
编程原则：
1，如果多个线程不共享临界资源，则无需同步。尽量改造代码，使其不存在同时访问临界     资源的情况。
2，避免不了共享的情况下：
	（1）把访问临界变量的代码弄成原子操作，一个量子操作即完成，使其不存在同时访问临界资源的情况这样也不用锁，效率高
	（2）加锁，阻塞线程，会发生上下文切换，开销巨大。程序员如果估计线程等待时间很短，就不阻塞线程，
	        使用while循环等待。

1.操作系统必须始终优先使用CPU，从而调度其他线程。
2.线程会消耗大量的操作系统资源，造成操作系统长期占用CPU忙于管理线程，无法运行线程。
3，暂停线程：Sleep( )
4,线程等待：Join（）；等待线程处于sleep（）状态，直到被等待的线程结束，才能继续执行
5，终止线程：t.Abort( ); 易崩溃&未必一定能关闭线程，所以不推荐使用；推荐使用CancellationToken
6，检测线程状态：ThreadState是枚举类型，线程的状态；Thread.CurrentThread是静态属性，当前线程对象的引用；
	Thread.CurrentThread.ThreadState 获得线程的状态；ThreadState.ToString( ) 枚举转换成字符串
7.前台线程和后台线程
	一个进程中，如果所有的前台线程结束，则进程结束，不管该进程中的后台线程是否已经结束
	把线程的IsBackground属性设置成true，即是后台线程
	不想应用程序结束，就在应用程序中创建一个不会完成的前台线程
	新建线程默认是前台线程
8.创建线程（如何使用提供一段使用要求数据的代码运行一个线程）
	1.线程运行 【一个代码片段 或 无参无返回值的函数】
	new Thread(()=> { Console.WriteLine("代码片段"); }).Start();
             new Thread( void Print(); ).Start();
	2.线程运行 【带返回值和参数的代码片段 或 有返回值有参的函数】
	lambda表达式操作外部变量
	new Thread(( )=> { 函数和代码块 });
	【注意】：多个lambda表达式操作同一个外部变量，共享变量可能出现不是我们想要的结果。
	本质：C#会在后台把lambda表达式的函数变成一个类的无参无返回值的成员方法的调用函数，
	作为参数和返回值的外部变量变成该类的成员变量。
-------------------------------------------------------------------------------------------
interlocked锁
指令 = 操作码 ，源操作数， 目的操作数
结果放在目的操作数中（值发生改变），源操作数不变
目的操作数不能是立即数。
CPU的指令集由机器指令组成，若CPU为某种运算设有专属电路，则该条指令执行很快。
若没有专属电路，该指令被分解成等价的多条已经存在专属电路的指令，这样会慢一点。
一条高级语言指令可以分解成多条汇编语言语句，而一条汇编语言语句对应一条机器指令；
中断（线程切换）发生在一条机器指令执行结束之后。
a++的大概实现步骤（多条机器指令）
1，把内存的a读到寄存器
2，寄存器执行a+1
3，将结果打进内存
开启两个线程，使count+10,000
    class Program
    {
        public static int count = 0;
        static void Main(string[] args)
        {
            new Thread(new ThreadStart(()=> { for (int i = 0; i < 100000; ++i) count++; })).Start();
            new Thread(new ThreadStart(() => { for (int i = 0; i < 100000; ++i) count++; })).Start();
            Thread.Sleep(1000);
            Console.WriteLine(count);
        }
    }
主线程 Thread.Sleep(1000)是为了等待两个子线程执行结束，不然输出的count必然小于20,000
排除子线程未运行结束就打印count的因素外
运行结果仍旧小于20,000，原因是：
1，线程01从内存读count到寄存器，完成+1
2，CPU切换到线程02，这时候线程02从内存中读到的还是count原来的值，完成计算后把结果打进内存
3，CPU切换到线程01，结果打进内存。
所以本应加2，但是count实际只加了1.
这是多线程访问临界资源导致的。
方法3效率最低，因为存在切换线程带来的开销。
    class Program
    {
        public static int count = 0;
        static void Main(string[] args)
        {
            new Thread(new ThreadStart(()=> { for (int i = 0; i < 100000; ++i) Interlocked.Increment(ref count); })).Start();
            new Thread(new ThreadStart(() => { for (int i = 0; i < 100000; ++i) Interlocked.Increment(ref count); })).Start();
            Thread.Sleep(100);
            Console.WriteLine(count);
        }
    }
使用interlocked，对整型变量执行原子操作。
-------------------------------------------------------------------------------------------
